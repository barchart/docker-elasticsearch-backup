#!/bin/bash

# Hack, docker-cron dumps all Docker environment variables in here on launch to
# allow propagating to child jobs
. /etc/environment

if curl -XGET "http://${ES_HOST}/_snapshot/${ES_REPOSITORY_NAME}" | grep -q "\"error\"";  then
	echo "No repository exists"
	if test -n "${ES_REPOSITORY_CREATE}"; then
		echo "Creating new repository as ${ES_REPOSITORY_CREATE}"
		curl -XPUT "http://${ES_HOST}/_snapshot/${ES_REPOSITORY_NAME}" -d "${ES_REPOSITORY_CREATE}"
	fi
fi

# Timestamped snapshot
SNAPSHOT=`date +%Y%m%d-%H%M%S`
echo "Starting snapshot ${SNAPSHOT}"

curl -XPUT "http://${ES_HOST}/_snapshot/${ES_REPOSITORY_NAME}/${SNAPSHOT}" -d "{
	\"ignore_unavailable\": \"${ES_IGNORE_UNAVAILABLE}\",
	\"include_global_state\": ${ES_GLOBAL_STATE}
}"

echo "Snapshot complete"

if test -n "${ES_REPOSITORY_PRUNE}"; then
	START=$(($ES_REPOSITORY_PRUNE + 1))
	# TODO cleanup old snapshots
	for OLD in `curl "http://${ES_HOST}/_snapshot/${ES_REPOSITORY_NAME}/_all?pretty" | grep \"snapshot\" | cut -d \" -f 4 | sort -r | tail -n +${START}`; do
		echo "Pruning old snapshot: ${OLD}"
		curl -XDELETE "http://${ES_HOST}/_snapshot/${ES_REPOSITORY_NAME}/${OLD}"
	done
fi
